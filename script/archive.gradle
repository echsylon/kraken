android.libraryVariants.all { variant ->
    def name = variant.name.capitalize()
    def template = "${archivesBaseName}-${version}"
    def subfolder = name.replaceAll('([a-z])([A-Z])', '$1/$2').toLowerCase()


    // Force AAR archives to have the same naming conventions as the JAR's.
    variant.outputs.all { output ->
        if (outputFileName.endsWith('.aar')) {
            outputFileName = file("${buildDir}/outputs/aar/${subfolder}/${template}.aar")
        }
    }

    // Compile javadoc output (HTML file tree)
    task("javadoc${name}", type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += project.files(variant.javaCompile.classpath.files)
        options {
            links 'http://docs.oracle.com/javase/8/docs/api/'
            linksOffline 'http://d.android.com/reference', "${android.sdkDirectory}/docs/reference"
        }
        destinationDir = file("${rootProject.rootDir}/docs")
    }

    // Build the javadoc Jar
    task("jarJavadoc${name}", type: Jar, dependsOn: "javadoc${name}") {
        classifier 'javadoc'
        from tasks["javadoc${name}"].destinationDir
        destinationDir = file("${buildDir}/outputs/jar/${subfolder}")
    }

    // Build the source Jar
    task("jarSource${name}", type: Jar) {
        classifier 'source'
        from android.sourceSets.main.java.srcDirs
        destinationDir = file("${buildDir}/outputs/jar/${subfolder}")
    }

    // Build the plain Jar
    task("jarSlim${name}", type: Jar) {
        from("${buildDir}/intermediates/transforms/retrolambda/release/folders/1/1/retrolambda") {
            exclude '**/BuildConfig.class'
            exclude '**/R$*.class'
            exclude '**/R.class'
        }
        destinationDir = file("${buildDir}/outputs/jar/${subfolder}")
    }

    // Build the fat Jar (including all dependencies)
    task("jarFat${name}", type: Jar) {
        classifier 'fat'
        // Add external dependency classes
        from configurations.compile.findAll {
            !it.getName().equals('android.jar') &&
            !it.getName().startsWith('junit') &&
            !it.getName().startsWith('hamcrest')
        }.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        // Add library classes
        from("${buildDir}/intermediates/transforms/retrolambda/release/folders/1/1/retrolambda") {
            exclude '**/BuildConfig.class'
            exclude '**/R$*.class'
            exclude '**/R.class'
        }
        destinationDir = file("${buildDir}/outputs/jar/${subfolder}")
    }
    
    // Make sure 'assembleXyz' runs the corresponding jar tasks
    tasks["assemble${name}"].dependsOn tasks["jarJavadoc${name}"]
    tasks["assemble${name}"].dependsOn tasks["jarSource${name}"]
    tasks["assemble${name}"].dependsOn tasks["jarSlim${name}"]
    tasks["assemble${name}"].dependsOn tasks["jarFat${name}"]
}

